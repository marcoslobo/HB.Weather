PARA EXECUTAR A SOLUÇÃO: 

REQUISITOS: 
	GIT 
	DOCKER

EM UM PROMPT DE COMANDO:
GIT CLONE https://github.com/marcoslobo/HB.Weather
DOCKER-COMPOSE UP 

-> AGUARDAR A SOLUÇÃO ESTAR DISPONÍVEL

ACESSAR HTTP://LOCALHOST:8080/SWAGGER

PARA BUSCAR UMA PREVISÃO, USAR O ENDPOINT GET /api/v1/Weather/{countryCode}/{cityName} 
ONDE:
	COUNTRY CODE = CÓDIGO DO PAIS EX.: BR; US
	CITYNAME = NOME DA CIDADE  EX.: BLUMENAU; RIO DE JANEIRO

ENTÃO SE QUERO BUSCAR A PREVISÃO DA CIDADE BLUMENAU, DEVO BUSCAR /api/v1/Weather/BR/BLUMENAU 

PARA VER OS RESULTADOS, UTILIZAR O ENDPOINT /api/v1/Weather/


EXPLICAÇÃO SOBRE A ARQUITETURA :
	TECNOLOGIAS -> .NET 3.0 ; ENTITY FRAMEWORK CORE, DOCKER, RABBITMQ, PostgreSQL

--> USEI UMA ABORDAGEM BEM SIMPLISTA(KISS), TENTANDO SEPARAR AS RESPONSABILIDADES EM SUAS RESPECTIVAS CAMADAS.

-> UM PROJETO DE WEBAPI, NO QUAL SE COMUNICA COM O USUÁRIO E ENVIA A SOLICITAÇÃO PARA A FILA DO BROKER, INFORMANDO UM 
ID DE CORRELAÇÃO E UMA ROTA NA QUAL A PRÓPRIA REQUISIÇÃO FICA OBSERVANDO A MESMA, AGUARDANDO O RETORNO PARA INSERIR 
NA BASE DE DADOS AS PREVISÕES TRATADAS.

-> UM PROJETO WORKSER SERVICE QUE ESTÁ INSCRITO COMO OBSERVADOR NA FILA DO BROKER PARA TRATAR AS SOLICITAÇÕES, 
ACESSANDO VIA PACOTE DE TERCEIRO A API DO OPEN WEATHER, E DEVOLVE PARA A FILA COM A ROTA DA REQUISÇÃO E ID DE CORRELAÇÃO. 

-> UTILIZEI UMA BIBLIOTECA COMPARTILHADA, PARA FORNECER RECURSOS GENÉRICOS, A QUAL PODERIA VIRAR UM PACOTE.


--> HÁ DIVERSOS PONTOS PARA MELHORAR COMO O ASSINCRONISMO, SOC, MODELAGEM, TESTES, LOG, MONITORAMENTO.. 
